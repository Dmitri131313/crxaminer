<div class="min-h-screen flex flex-col bg-gray-50 dark:bg-gray-900">
  <div class="max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow overflow-y-auto">
    

    <!-- Analysis Status -->
    <div id="analysis_status">
      <% if @extension_id && !@manifest %>
        <%= render "loading_status", message: "Starting analysis..." %>
        
        <%= javascript_tag nonce: true do %>
          document.addEventListener('DOMContentLoaded', function() {
            const progressBar = document.getElementById('progress-bar');
            const progressMessage = document.getElementById('progress-message');
            const messages = [
              'Starting analysis...',
              'Fetching extension details...',
              'Downloading extension...',
              'Analyzing permissions...',
              'Checking security...',
              'Finalizing analysis...'
            ];
            let currentProgress = 0;
            let messageIndex = 0;

            // Update progress every 800ms
            const progressInterval = setInterval(() => {
              if (currentProgress < 90) {
                currentProgress += Math.random() * 15;
                currentProgress = Math.min(currentProgress, 90);
                progressBar.style.width = currentProgress + '%';
                
                // Update message periodically
                if (currentProgress > (messageIndex + 1) * 15 && messageIndex < messages.length - 1) {
                  messageIndex++;
                  progressMessage.textContent = messages[messageIndex];
                }
              }
            }, 800);

            // Start the analysis
            fetch('/welcome/analyze?id=<%= @extension_id %>', {
              headers: {
                'Accept': 'text/html',
                'X-Requested-With': 'XMLHttpRequest'
              },
              credentials: 'same-origin'
            })
            .then(response => response.text())
            .then(html => {
              // Complete the progress bar
              clearInterval(progressInterval);
              progressBar.style.width = '100%';
              progressMessage.textContent = 'Analysis complete!';
              
              // Short delay before showing results
              setTimeout(() => {
                document.getElementById('analysis_results').innerHTML = html;
                document.getElementById('analysis_status').style.display = 'none';
              }, 500);
            })
            .catch(error => {
              clearInterval(progressInterval);
              progressMessage.textContent = 'Error during analysis. Please try again.';
              progressBar.style.backgroundColor = '#EF4444'; // Red color for error
            });
          });
        <% end %>
      <% end %>
    </div>

    <!-- Results -->
    <div id="analysis_results">
      <% if @manifest %>
        <%= render 'results' %>
      <% end %>
    </div>


  </div>
</div>

<% content_for :page_scripts do %>
  <script>
    function initializeUrlsPagination() {
      
      const container = document.getElementById('embedded-urls-container');
      if (!container) {
        console.log('No pagination container found, trying again in 1000ms');
        setTimeout(initializeUrlsPagination, 1000);
        return;
      }

      const urls = JSON.parse(container.dataset.urls);

      const tbody = document.getElementById('embedded-urls-tbody');
      const currentPageEl = document.getElementById('current-page');
      const prevButton = document.getElementById('prev-page');
      const nextButton = document.getElementById('next-page');
      
      const ROWS_PER_PAGE = 25;
      const URLS_PER_ROW = 3;
      const URLS_PER_PAGE = ROWS_PER_PAGE * URLS_PER_ROW;
      const totalPages = Math.ceil(urls.length / URLS_PER_PAGE);
      let currentPage = 1;

      if (totalPages === 1) return;

      function updateTable() {
        const startIdx = (currentPage - 1) * URLS_PER_PAGE;
        const endIdx = startIdx + URLS_PER_PAGE;
        const pageUrls = urls.slice(startIdx, endIdx);

        // Clear existing rows
        tbody.innerHTML = '';
        
        // Create new rows
        for (let i = 0; i < pageUrls.length; i += URLS_PER_ROW) {
          const row = document.createElement('tr');
          row.className = 'border-t dark:border-gray-700';
          
          for (let j = 0; j < URLS_PER_ROW; j++) {
            const cell = document.createElement('td');
            cell.className = 'w-1/3 px-4 py-2 text-gray-600 dark:text-gray-300 truncate';
            const url = pageUrls[i + j];
            cell.textContent = url || '';
            row.appendChild(cell);
          }
          
          tbody.appendChild(row);
        }

        // Update UI state
        currentPageEl.textContent = currentPage;
        
        // Handle prev button
        if (currentPage === 1) {
          prevButton.classList.add('hidden');
          prevButton.disabled = true;
        } else {
          prevButton.classList.remove('hidden');
          prevButton.disabled = false;
        }

        // Handle next button
        if (currentPage === totalPages) {
          nextButton.classList.add('hidden');
          nextButton.disabled = true;
        } else {
          nextButton.classList.remove('hidden');
          nextButton.disabled = false;
        }
      }

      // Add event listeners
      prevButton?.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          updateTable();
        }
      });

      nextButton?.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          updateTable();
        }
      });

      // Initialize the table
      updateTable();
    }

    // Listen for both initial load and Turbo navigation
    document.addEventListener('DOMContentLoaded', initializeUrlsPagination);
    document.addEventListener('turbo:load', initializeUrlsPagination);
    document.addEventListener('turbo:render', initializeUrlsPagination);
  </script>
<% end %>

